package remotedesktop.server;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;

import remotedesktop.server.autoscreenshot.AutoScreenshot;
import remotedesktop.server.autoscreenshot.AutoScreenshotListener;
import remotedesktop.server.client.Client;
import remotedesktop.server.client.ClientListener;

/**
 * Éssa é a classe Server. 
 * Extende da classe Thread, assumindo assim o comportamento da mesma de iniciar um processamento
 * paralelo. Necessário para que se fique escutando uma determinada porta e adicionando novas conexões
 * 
 * @class Server
 * @author carlosrodrigues
 */
public class Server extends Thread implements AutoScreenshotListener, ClientListener {
	private Logger logger;
	private ServerSocket serverSocket;
	private AutoScreenshot screenShooter;
	private List<Client> clients;
	
	/**
	 * Construtor
	 * @param port
	 * @throws IOException
	 * @throws AWTException
	 */
	public Server(int port) throws IOException, AWTException {
		this.logger = Logger.getInstance();
		this.serverSocket = new ServerSocket(port);
		this.clients = new ArrayList<Client>();
	}
	
	/**
	 * Grencia inicia e encerra o processo de auto screenshot.
	 * Esse processo necessita dessa gerência, pois caso não haja nenhum cliente conectado,
	 * o mesmo estará desperdiçando recursos do sistema, o que pode acarretar em perda de 
	 * desempenho para o usuário do computador
	 * 
	 * @param start
	 */
	private void startAutoScreenshot(boolean start) {
		if (!start) { //Parar o processo ?
			if (this.screenShooter == null) //Já foi iniciado ?
				return; //Não, Então não faz nada

			this.logger.info("Interrompendo Auto-Screenshot..."); //Registra a interrupção do processo

			this.screenShooter.interrupt(); //Intorrompe a thread
			this.screenShooter = null; //Libera memória

			return;
		}//Caso não seja pra parar o processo, então é pra iniciar

		if (this.screenShooter != null) // Já foi iniciado ? 
			return; // Sim, então não faz nada

		this.logger.info("Iniciando auto screenshot"); //Registra o início do processo
		try {
			this.screenShooter = new AutoScreenshot(); //Intancia o objeto
			this.screenShooter.addAutoScreenshotListener(this); //Adiciona a si mesmo como listener
			this.screenShooter.start(); //Inicia o processo
		} catch (AWTException e) {
			this.logger.printStackTrace(e);
			System.exit(1);
		}

	}
	
	/**
	 * Adiciona um novo cliente à lista de clientes conectados
	 * 
	 * @param socket
	 * @throws IOException
	 */
	private void addNewClient(Socket socket) throws IOException {
		this.logger.info("Novo cliente conectado!");

		Client client = new Client(socket, this);
		client.start();

		this.clients.add(client);

		this.logger.info("Cliente configurado: " + client.getClientId());
		
		this.startAutoScreenshot(true);
	}
	
	/**
	 * Esse método é executado quando a nova thread é iniciada através do método start
	 */
	@Override
	public void run() {
		while (true) {
			try {
				this.addNewClient(this.serverSocket.accept());
			} catch (Exception e) {
				this.logger.printStackTrace(e);
			}
		}
	}

	@Override
	public void onScreenshot(BufferedImage image) {
		ByteArrayOutputStream output = new ByteArrayOutputStream();

		try {
			ImageIO.write(image, "gif", output);
		} catch (IOException e) {
			e.printStackTrace();
		}

		byte[] bytes = output.toByteArray();

		for (Client client : new ArrayList<Client>(this.clients)) {
			client.sendBytes(bytes);
		}
	}

	@Override
	public void onDisconnected(Client client) {
		this.clients.remove(client);

		this.logger.info("Cliente desconectado: " + client.getClientId());

		if (this.clients.size() == 0) {
			this.startAutoScreenshot(false);
		}
	}
}
