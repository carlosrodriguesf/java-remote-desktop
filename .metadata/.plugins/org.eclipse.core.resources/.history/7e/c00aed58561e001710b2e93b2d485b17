package remotedesktop.server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.Scanner;

/**
 * 
 * @author carlosrodrigues
 *
 */
public class Client extends Thread implements ClientDataSenderListener {
	private static int idInc = 1;

	private Logger logger;
	private int id;
	private Socket socket;
	private ObjectOutputStream outputStream;
	private Scanner inputStream;
	private boolean sendLocked;
	
	public Client(Socket socket) throws IOException {
		this.logger = Logger.getInstance();
		this.id = idInc++;
		this.socket = socket;
		this.outputStream = new ObjectOutputStream(socket.getOutputStream());
		this.inputStream = new Scanner(socket.getInputStream());
		this.sendLocked = false;
	}
	
	public int getClientId() {
		return id;
	}

	private void log (String msg) {
		this.logger.info("Client (" + this.getId() + "): " + msg);
	}
	
	private void disconnect () {
		
	}
	public void sendBytes(byte[] bytes) {
		if(!this.sendLocked) {
			ClientDataSender sender = new ClientDataSender(bytes, this.outputStream, this);
			sender.start();
		}
	}
	
	
	@Override
	public void run () {
		while(this.inputStream.hasNextLine()) {
			String line = this.inputStream.nextLine();
			if(line.equals("DISCONNECT")) {
				
			}
		}
	}
	/**
	 * Data Sender Listener Methods
	 */
	@Override
	public void onPrepare(ClientDataSender clientDataSender) {
		this.sending = true;
		log("Preparando para enviar...");
	}
	@Override
	public void onStart(ClientDataSender clientDataSender) {
		log("Envio iniciado...");
	}
	@Override
	public void onSuccess(ClientDataSender clientDataSender) {
		log("Envio realizado com sucesso...");
	}
	@Override
	public void onError(ClientDataSender clientDataSender, IOException e) {
		log("Erro ao enviar dados: " + e.getMessage());
	}
	@Override
	public void onComplete(ClientDataSender clientDataSender) {
		this.sending = false;
	}
}
