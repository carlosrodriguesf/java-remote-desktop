package remotedesktop.server.client;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.Scanner;

import remotedesktop.server.Logger;
import remotedesktop.server.datasender.DataSender;
import remotedesktop.server.datasender.DataSenderListener;

/**
 * 
 * @author carlosrodrigues
 *
 */
public class Client extends Thread implements DataSenderListener {
	private static int idInc = 1;

	private Logger logger;
	private int id;
	private Socket socket;
	private ObjectOutputStream outputStream;
	private Scanner inputStream;
	private ClientListener listener;
	private boolean sendLocked;
	private int errorCount;

	public Client(Socket socket, ClientListener listener) throws IOException {
		this.logger = Logger.getInstance();
		this.id = idInc++;
		this.socket = socket;
		this.outputStream = new ObjectOutputStream(socket.getOutputStream());
		this.inputStream = new Scanner(socket.getInputStream());
		this.sendLocked = false;
		this.listener = listener;
	}

	public int getClientId() {
		return id;
	}

	private void log(String msg) {
		this.logger.info("Client (" + this.getId() + "): " + msg);
	}

	private void disconnect() throws IOException {
		this.sendLocked = true;

		IOException e = null;
		try {
			this.inputStream.close();
			this.outputStream.close();
			this.socket.close();
		} catch (IOException e1) {
			e = e1;
		}
		
		this.listener.onDisconnected(this);
		
		if(e != null) {
			throw e;
		}
	}

	public void sendBytes(byte[] bytes) {
		//if (!this.sendLocked) {
			DataSender sender = new DataSender(bytes, this.outputStream, this);
			sender.start();
		//}
	}

	@Override
	public void run() {
		while (this.inputStream.hasNextLine()) {
			String line = this.inputStream.nextLine();
			if (line.equals("DISCONNECT")) {
				try {
					this.disconnect();
				} catch (IOException e) {
					this.logger.printStackTrace(e);
				}
				break;
			}
		}
	}

	/**
	 * Data Sender Listener Methods
	 */
	@Override
	public void onPrepare(DataSender clientDataSender) {
		this.sendLocked = true;
		//log("Preparando para enviar...");
	}

	@Override
	public void onStart(DataSender clientDataSender) {
		//log("Envio iniciado...");
	}

	@Override
	public void onSuccess(DataSender clientDataSender) {
		this.errorCount = 0;
	}

	@Override
	public void onError(DataSender clientDataSender, IOException e) {
		++ this.errorCount;
		
		this.logger.error(String.format("Client (%d): Erro ao enviar dados... %d", this.getClientId(), this.errorCount));
		if( this.errorCount >= 10) {
			try {
				this.disconnect();
			} catch (IOException e1) {
				
			}
		}
	}

	@Override
	public void onComplete(DataSender clientDataSender) {
		this.sendLocked = false;
	}
}
